// bootstrap
@256
D=A
@0
M=D
// call Sys.init 0
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Sys.init.9
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@0
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Sys.init
@Sys.init
0;JMP
(RETURN.Sys.init.9)
// function Class1.set 0
(Class1.set)
// PUSH argument 0
@2
A=M
D=A
@0
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
@0
M=M-1
@0
A=M
D=M
@16
M=D
// PUSH argument 1
@2
A=M
D=A
@1
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
@0
M=M-1
@0
A=M
D=M
@17
M=D
// PUSH constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
// return
@1
D=M
@5
A=D-A
D=M
@R15
M=D
// POP argument 0
@0
M=M-1
@2
A=M
D=A
@0
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
@2
D=M
@0
M=D+1
@1
A=M-1
D=M
@4
M=D
@2
D=A
@1
A=M-D
D=M
@3
M=D
@3
D=A
@1
A=M-D
D=M
@2
M=D
@4
D=A
@1
A=M-D
D=M
@1
M=D
@15
A=M
0;JMP
// function Class1.get 0
(Class1.get)
@16
A=M
D=A
@0
A=M
M=D
@0
M=M+1
@17
A=M
D=A
@0
A=M
M=D
@0
M=M+1
// sub
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D-A
@0
A=M-1
M=D
// return
@1
D=M
@5
A=D-A
D=M
@R15
M=D
// POP argument 0
@0
M=M-1
@2
A=M
D=A
@0
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
@2
D=M
@0
M=D+1
@1
A=M-1
D=M
@4
M=D
@2
D=A
@1
A=M-D
D=M
@3
M=D
@3
D=A
@1
A=M-D
D=M
@2
M=D
@4
D=A
@1
A=M-D
D=M
@1
M=D
@15
A=M
0;JMP
// function Class2.set 0
(Class2.set)
// PUSH argument 0
@2
A=M
D=A
@0
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
@0
M=M-1
@0
A=M
D=M
@18
M=D
// PUSH argument 1
@2
A=M
D=A
@1
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
@0
M=M-1
@0
A=M
D=M
@19
M=D
// PUSH constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
// return
@1
D=M
@5
A=D-A
D=M
@R15
M=D
// POP argument 0
@0
M=M-1
@2
A=M
D=A
@0
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
@2
D=M
@0
M=D+1
@1
A=M-1
D=M
@4
M=D
@2
D=A
@1
A=M-D
D=M
@3
M=D
@3
D=A
@1
A=M-D
D=M
@2
M=D
@4
D=A
@1
A=M-D
D=M
@1
M=D
@15
A=M
0;JMP
// function Class2.get 0
(Class2.get)
@18
A=M
D=A
@0
A=M
M=D
@0
M=M+1
@19
A=M
D=A
@0
A=M
M=D
@0
M=M+1
// sub
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D-A
@0
A=M-1
M=D
// return
@1
D=M
@5
A=D-A
D=M
@R15
M=D
// POP argument 0
@0
M=M-1
@2
A=M
D=A
@0
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
@2
D=M
@0
M=D+1
@1
A=M-1
D=M
@4
M=D
@2
D=A
@1
A=M-D
D=M
@3
M=D
@3
D=A
@1
A=M-D
D=M
@2
M=D
@4
D=A
@1
A=M-D
D=M
@1
M=D
@15
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// PUSH constant 6
@6
D=A
@0
A=M
M=D
@0
M=M+1
// PUSH constant 8
@8
D=A
@0
A=M
M=D
@0
M=M+1
// call Class1.set 2
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Class1.set.0
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Class1.set
@Class1.set
0;JMP
(RETURN.Class1.set.0)
@0
M=M-1
@5
D=A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
// PUSH constant 23
@23
D=A
@0
A=M
M=D
@0
M=M+1
// PUSH constant 15
@15
D=A
@0
A=M
M=D
@0
M=M+1
// call Class2.set 2
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Class2.set.1
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@2
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Class2.set
@Class2.set
0;JMP
(RETURN.Class2.set.1)
@0
M=M-1
@5
D=A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
// call Class1.get 0
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Class1.get.2
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@0
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Class1.get
@Class1.get
0;JMP
(RETURN.Class1.get.2)
// call Class2.get 0
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Class2.get.3
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@0
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Class2.get
@Class2.get
0;JMP
(RETURN.Class2.get.3)
(END)
// goto END
@END
0;JMP
// function Main.fibonacci 0
(Main.fibonacci)
// PUSH argument 0
@2
A=M
D=A
@0
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// PUSH constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
// lt
@0
AM=M-1
D=M
A=A-1
D=M-D
@LT_TRUE0
D;JLT
@0
A=M-1
M=0
@LT_END0
0;JMP
(LT_TRUE0)
@0
A=M-1
M=-1
(LT_END0)
// if-goto N_LT_2
@0
AM=M-1
D=M
@N_LT_2
D;JNE
// goto N_GE_2
@N_GE_2
0;JMP
(N_LT_2)
// PUSH argument 0
@2
A=M
D=A
@0
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// return
@1
D=M
@5
A=D-A
D=M
@R15
M=D
// POP argument 0
@0
M=M-1
@2
A=M
D=A
@0
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
@2
D=M
@0
M=D+1
@1
A=M-1
D=M
@4
M=D
@2
D=A
@1
A=M-D
D=M
@3
M=D
@3
D=A
@1
A=M-D
D=M
@2
M=D
@4
D=A
@1
A=M-D
D=M
@1
M=D
@15
A=M
0;JMP
(N_GE_2)
// PUSH argument 0
@2
A=M
D=A
@0
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// PUSH constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
// sub
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D-A
@0
A=M-1
M=D
// call Main.fibonacci 1
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Main.fibonacci.4
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Main.fibonacci
@Main.fibonacci
0;JMP
(RETURN.Main.fibonacci.4)
// PUSH argument 0
@2
A=M
D=A
@0
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// PUSH constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
// sub
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D-A
@0
A=M-1
M=D
// call Main.fibonacci 1
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Main.fibonacci.5
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Main.fibonacci
@Main.fibonacci
0;JMP
(RETURN.Main.fibonacci.5)
// add
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D+A
@0
A=M-1
M=D
// return
@1
D=M
@5
A=D-A
D=M
@R15
M=D
// POP argument 0
@0
M=M-1
@2
A=M
D=A
@0
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
@2
D=M
@0
M=D+1
@1
A=M-1
D=M
@4
M=D
@2
D=A
@1
A=M-D
D=M
@3
M=D
@3
D=A
@1
A=M-D
D=M
@2
M=D
@4
D=A
@1
A=M-D
D=M
@1
M=D
@15
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// PUSH constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
// call Main.fibonacci 1
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Main.fibonacci.6
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Main.fibonacci
@Main.fibonacci
0;JMP
(RETURN.Main.fibonacci.6)
(END)
// goto END
@END
0;JMP
// function Sys.init 0
(Sys.init)
// PUSH constant 4000
@4000
D=A
@0
A=M
M=D
@0
M=M+1
// pop pointer 0
@0
M=M-1
@0
A=M
D=M
@3
M=D
// PUSH constant 5000
@5000
D=A
@0
A=M
M=D
@0
M=M+1
// pop pointer 1
@0
M=M-1
@0
A=M
D=M
@4
M=D
// call Sys.main 0
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Sys.main.7
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@0
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Sys.main
@Sys.main
0;JMP
(RETURN.Sys.main.7)
@0
M=M-1
@6
D=A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
(LOOP)
// goto LOOP
@LOOP
0;JMP
// function Sys.main 5
(Sys.main)
@0
D=A
@0
A=M
M=D
@0
M=M+1
@0
D=A
@0
A=M
M=D
@0
M=M+1
@0
D=A
@0
A=M
M=D
@0
M=M+1
@0
D=A
@0
A=M
M=D
@0
M=M+1
@0
D=A
@0
A=M
M=D
@0
M=M+1
// PUSH constant 4001
@4001
D=A
@0
A=M
M=D
@0
M=M+1
// pop pointer 0
@0
M=M-1
@0
A=M
D=M
@3
M=D
// PUSH constant 5001
@5001
D=A
@0
A=M
M=D
@0
M=M+1
// pop pointer 1
@0
M=M-1
@0
A=M
D=M
@4
M=D
// PUSH constant 200
@200
D=A
@0
A=M
M=D
@0
M=M+1
// POP local 1
@0
M=M-1
@1
A=M
D=A
@1
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
// PUSH constant 40
@40
D=A
@0
A=M
M=D
@0
M=M+1
// POP local 2
@0
M=M-1
@1
A=M
D=A
@2
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
// PUSH constant 6
@6
D=A
@0
A=M
M=D
@0
M=M+1
// POP local 3
@0
M=M-1
@1
A=M
D=A
@3
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
// PUSH constant 123
@123
D=A
@0
A=M
M=D
@0
M=M+1
// call Sys.add12 1
// push return address
@0
D=M
M=M+1
@R13
M=D
@RETURN.Sys.add12.8
D=A
@R13
A=M
M=D
// push LCL
@0
D=M
M=M+1
@R13
M=D
@1
A=M
D=A
@R13
A=M
M=D
// push ARG
@0
D=M
M=M+1
@R13
M=D
@2
A=M
D=A
@R13
A=M
M=D
// push THIS
@0
D=M
M=M+1
@R13
M=D
@3
A=M
D=A
@R13
A=M
M=D
// push THAT
@0
D=M
M=M+1
@R13
M=D
@4
A=M
D=A
@R13
A=M
M=D
// reposition ARG
@0
D=M
@5
D=D-A
@1
D=D-A
@2
M=D
@0
D=M
@1
M=D
// goto Sys.add12
@Sys.add12
0;JMP
(RETURN.Sys.add12.8)
@0
M=M-1
@5
D=A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
// PUSH local 0
@1
A=M
D=A
@0
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// PUSH local 1
@1
A=M
D=A
@1
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// PUSH local 2
@1
A=M
D=A
@2
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// PUSH local 3
@1
A=M
D=A
@3
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// PUSH local 4
@1
A=M
D=A
@4
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// add
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D+A
@0
A=M-1
M=D
// add
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D+A
@0
A=M-1
M=D
// add
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D+A
@0
A=M-1
M=D
// add
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D+A
@0
A=M-1
M=D
// return
@1
D=M
@5
A=D-A
D=M
@R15
M=D
// POP argument 0
@0
M=M-1
@2
A=M
D=A
@0
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
@2
D=M
@0
M=D+1
@1
A=M-1
D=M
@4
M=D
@2
D=A
@1
A=M-D
D=M
@3
M=D
@3
D=A
@1
A=M-D
D=M
@2
M=D
@4
D=A
@1
A=M-D
D=M
@1
M=D
@15
A=M
0;JMP
// function Sys.add12 0
(Sys.add12)
// PUSH constant 4002
@4002
D=A
@0
A=M
M=D
@0
M=M+1
// pop pointer 0
@0
M=M-1
@0
A=M
D=M
@3
M=D
// PUSH constant 5002
@5002
D=A
@0
A=M
M=D
@0
M=M+1
// pop pointer 1
@0
M=M-1
@0
A=M
D=M
@4
M=D
// PUSH argument 0
@2
A=M
D=A
@0
D=D+A
@R13
M=D
@R13
A=M
D=M
@0
A=M
M=D
@0
M=M+1
// PUSH constant 12
@12
D=A
@0
A=M
M=D
@0
M=M+1
// add
@0
AM=M-1
D=M
@R13
M=D
@0
A=M-1
D=M
@R13
A=M
D=D+A
@0
A=M-1
M=D
// return
@1
D=M
@5
A=D-A
D=M
@R15
M=D
// POP argument 0
@0
M=M-1
@2
A=M
D=A
@0
D=D+A
@0
A=M
D=D+M
A=D-M
D=D-A
M=D
@2
D=M
@0
M=D+1
@1
A=M-1
D=M
@4
M=D
@2
D=A
@1
A=M-D
D=M
@3
M=D
@3
D=A
@1
A=M-D
D=M
@2
M=D
@4
D=A
@1
A=M-D
D=M
@1
M=D
@15
A=M
0;JMP